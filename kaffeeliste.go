package main

import (
	"fmt"
	"os"

	"github.com/akamensky/argparse"
	"github.com/common-nighthawk/go-figure"
	"github.com/olekukonko/tablewriter"
)

var (
	// Kopfzeile
	headline *string

	// Schrift der Kopfzeile
	headlineFont *string

	// Pfad zur Konfigurationsdatei
	configFilePath *string

	// Breite der Tabelle
	width *int

	// Kaffeetrinker-Namen
	names *[]string

	// Soll der Tabellenrahmen angezeigt werden?
	showBorder *bool

	// Text im Footer
	footerText string = "Generated by github.com/nullpointerio/Kaffeeliste"
)

func main() {
	parseArguments()
	printHeader()
	println()
	printTable()
}

// Liest die command-line-Parameter ein.
func parseArguments() {
	// Parser
	parser := argparse.NewParser("Kaffeeliste", "Generates a list containing all coffee-trinkers to make a tick for every coffee")

	// Parameter
	headline = parser.String("", "headline", &argparse.Options{Required: false, Default: "Kaffeeliste", Help: "Headline"})
	headlineFont = parser.String("", "headline-font", &argparse.Options{Required: false, Default: "univers", Help: "Font from https://github.com/common-nighthawk/go-figure"})
	configFilePath = parser.String("f", "file", &argparse.Options{Required: false, Help: "path of configuration file"})
	width = parser.Int("w", "width", &argparse.Options{Required: false, Default: 84, Help: "table width (characters per line)"})
	names = parser.StringList("n", "name", &argparse.Options{Required: true, Help: "names of the coffee-trinkers"})
	showBorder = parser.Flag("b", "border", &argparse.Options{Required: false, Default: true, Help: "show border"})

	// Im Fehlerfall Hilfe ausgeben und Programm verlassen
	err := parser.Parse(os.Args)
	if err != nil {
		fmt.Print(parser.Usage(err))
		os.Exit(1)
	}
}

// Schreibt den Header auf stdout.
func printHeader() {
	myFigure := figure.NewColorFigure(*headline, *headlineFont, "green", true)
	myFigure.Print()
}

// Schreibt die Tabelle auf stdout.
func printTable() {
	table := tablewriter.NewWriter(os.Stdout)
	table.SetHeader([]string{"Name", "Count"})
	table.SetRowLine(true)
	table.SetColMinWidth(0, 15)
	table.SetColMinWidth(1, *width)
	table.AppendBulk(generateDataForTableWriter())
	table.SetFooter([]string{"", footerText})
	table.SetBorder(*showBorder)
	table.Render()
}

// Generiert die Datenstruktur für die Tabelle
func generateDataForTableWriter() [][]string {
	data := make([][]string, len(*names))
	for i, name := range *names {
		//bean := html.UnescapeString("&#" + strconv.Itoa())
		data[i] = []string{name, "☕☕☕☕☕ ☕☕☕☕☕ ☕☕☕☕☕ ☕☕☕☕☕ "}
	}
	return data
}
